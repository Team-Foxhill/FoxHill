//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/Player InputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player InputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""b37b53ab-ca10-4b83-9740-0af4687b44fd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""38e8983a-1784-4adb-a453-a46b457f1903"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""ddeac31b-477c-446f-a152-83fab0576f5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchSkill"",
                    ""type"": ""Button"",
                    ""id"": ""ddf18a7b-e2e8-4249-ba25-938987ce2fc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Guard"",
                    ""type"": ""Button"",
                    ""id"": ""5872e2eb-b987-42e7-8327-e5d8b0b4ad3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""a43adb91-9dce-4763-b26d-ca18e8ebf4e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSkill"",
                    ""type"": ""Button"",
                    ""id"": ""dfea5937-a767-4039-9153-67688e9294ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""3a680ec0-b515-4e31-9ac9-3f504ae1140c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e1156645-0410-4a39-9ec5-30474eeb9145"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eec30e9f-03d4-477c-9320-af9a4f82082a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6d39e68e-3670-4c8d-a0f1-81e49d55b5b0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""69dcc29b-008a-4285-bea4-9d9c75b3a232"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b560df0-15ac-4e3c-9ca4-61fc243222c1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ddcdd8b8-78cc-4db8-a7f0-de72399dd119"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""586b74f2-210a-41bf-832e-b21bf9235ab1"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SwitchSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""641edaa7-6dc9-470f-ae1d-a9c456af60ac"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd112584-b434-46c5-bcea-4a48622ca66c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CastSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee064858-c126-4e56-b9e5-179ea09091d9"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afa6f0d7-3b6f-4c75-8396-8046d0393064"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Guard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryAction"",
            ""id"": ""a50640f2-22e1-4e53-b2e8-a52111dd8b54"",
            ""actions"": [
                {
                    ""name"": ""SwitchSlot"",
                    ""type"": ""Value"",
                    ""id"": ""4cf5d461-fc14-4718-a339-c05107bf47ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""f45d1a26-4e5d-415f-8e96-aff03abe6fda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""3276fe34-50f6-473e-9bd0-07c9c2a55f31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""27707e52-b710-4974-a1df-3a1303dfb45a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0b97e07b-1b48-44fc-97df-7668c3a7b40a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchSlot"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bd413f3d-57a8-403d-8e37-78e94f36b87c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SwitchSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ddae75cc-bfce-42f0-a726-a04e190fe571"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SwitchSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""20f6da82-09fd-4da1-aaac-234b920d7569"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SwitchSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b727537b-c438-4f8a-89ee-91426031dcb0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SwitchSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3792d236-9a41-4b11-8a84-986cfe3ba53c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3065e9fb-8fc8-4ecf-a1ab-fb31996f0791"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e029f63-4d46-4a0c-8bcf-860120e86a01"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpawnAction"",
            ""id"": ""89aa6920-2bbd-434a-8147-8d69dd0be8c2"",
            ""actions"": [
                {
                    ""name"": ""MovePrefab"",
                    ""type"": ""Value"",
                    ""id"": ""8b7dd646-5125-4b55-9918-1dff446df6e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""b819cf86-d358-43a6-9dd0-da37b6738d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""3ddb4646-819e-4e7d-8730-6c59bffc6592"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7b9dd79f-983c-4091-a248-88b5db041396"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePrefab"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ce166e49-a3fc-46bf-8ea5-43982ebe11a0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MovePrefab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d6dfeeb8-096e-4a34-a60e-5a13313f5476"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MovePrefab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0d3167c-a6e8-4f90-8f33-c84355d811db"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MovePrefab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8f78accc-e9dd-4a33-9ec1-4834503ec15d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MovePrefab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""79183c08-4b7c-4886-8b6b-989580023971"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13909e3a-002b-4200-9e64-431fcb64d127"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Move = m_PlayerAction.FindAction("Move", throwIfNotFound: true);
        m_PlayerAction_Dodge = m_PlayerAction.FindAction("Dodge", throwIfNotFound: true);
        m_PlayerAction_SwitchSkill = m_PlayerAction.FindAction("SwitchSkill", throwIfNotFound: true);
        m_PlayerAction_Guard = m_PlayerAction.FindAction("Guard", throwIfNotFound: true);
        m_PlayerAction_Attack = m_PlayerAction.FindAction("Attack", throwIfNotFound: true);
        m_PlayerAction_CastSkill = m_PlayerAction.FindAction("CastSkill", throwIfNotFound: true);
        m_PlayerAction_Inventory = m_PlayerAction.FindAction("Inventory", throwIfNotFound: true);
        // InventoryAction
        m_InventoryAction = asset.FindActionMap("InventoryAction", throwIfNotFound: true);
        m_InventoryAction_SwitchSlot = m_InventoryAction.FindAction("SwitchSlot", throwIfNotFound: true);
        m_InventoryAction_Close = m_InventoryAction.FindAction("Close", throwIfNotFound: true);
        m_InventoryAction_Select = m_InventoryAction.FindAction("Select", throwIfNotFound: true);
        m_InventoryAction_Deselect = m_InventoryAction.FindAction("Deselect", throwIfNotFound: true);
        // SpawnAction
        m_SpawnAction = asset.FindActionMap("SpawnAction", throwIfNotFound: true);
        m_SpawnAction_MovePrefab = m_SpawnAction.FindAction("MovePrefab", throwIfNotFound: true);
        m_SpawnAction_Confirm = m_SpawnAction.FindAction("Confirm", throwIfNotFound: true);
        m_SpawnAction_Cancel = m_SpawnAction.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private List<IPlayerActionActions> m_PlayerActionActionsCallbackInterfaces = new List<IPlayerActionActions>();
    private readonly InputAction m_PlayerAction_Move;
    private readonly InputAction m_PlayerAction_Dodge;
    private readonly InputAction m_PlayerAction_SwitchSkill;
    private readonly InputAction m_PlayerAction_Guard;
    private readonly InputAction m_PlayerAction_Attack;
    private readonly InputAction m_PlayerAction_CastSkill;
    private readonly InputAction m_PlayerAction_Inventory;
    public struct PlayerActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerAction_Move;
        public InputAction @Dodge => m_Wrapper.m_PlayerAction_Dodge;
        public InputAction @SwitchSkill => m_Wrapper.m_PlayerAction_SwitchSkill;
        public InputAction @Guard => m_Wrapper.m_PlayerAction_Guard;
        public InputAction @Attack => m_Wrapper.m_PlayerAction_Attack;
        public InputAction @CastSkill => m_Wrapper.m_PlayerAction_CastSkill;
        public InputAction @Inventory => m_Wrapper.m_PlayerAction_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @SwitchSkill.started += instance.OnSwitchSkill;
            @SwitchSkill.performed += instance.OnSwitchSkill;
            @SwitchSkill.canceled += instance.OnSwitchSkill;
            @Guard.started += instance.OnGuard;
            @Guard.performed += instance.OnGuard;
            @Guard.canceled += instance.OnGuard;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @CastSkill.started += instance.OnCastSkill;
            @CastSkill.performed += instance.OnCastSkill;
            @CastSkill.canceled += instance.OnCastSkill;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IPlayerActionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @SwitchSkill.started -= instance.OnSwitchSkill;
            @SwitchSkill.performed -= instance.OnSwitchSkill;
            @SwitchSkill.canceled -= instance.OnSwitchSkill;
            @Guard.started -= instance.OnGuard;
            @Guard.performed -= instance.OnGuard;
            @Guard.canceled -= instance.OnGuard;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @CastSkill.started -= instance.OnCastSkill;
            @CastSkill.performed -= instance.OnCastSkill;
            @CastSkill.canceled -= instance.OnCastSkill;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);

    // InventoryAction
    private readonly InputActionMap m_InventoryAction;
    private List<IInventoryActionActions> m_InventoryActionActionsCallbackInterfaces = new List<IInventoryActionActions>();
    private readonly InputAction m_InventoryAction_SwitchSlot;
    private readonly InputAction m_InventoryAction_Close;
    private readonly InputAction m_InventoryAction_Select;
    private readonly InputAction m_InventoryAction_Deselect;
    public struct InventoryActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public InventoryActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchSlot => m_Wrapper.m_InventoryAction_SwitchSlot;
        public InputAction @Close => m_Wrapper.m_InventoryAction_Close;
        public InputAction @Select => m_Wrapper.m_InventoryAction_Select;
        public InputAction @Deselect => m_Wrapper.m_InventoryAction_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_InventoryAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActionActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActionActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionActionsCallbackInterfaces.Add(instance);
            @SwitchSlot.started += instance.OnSwitchSlot;
            @SwitchSlot.performed += instance.OnSwitchSlot;
            @SwitchSlot.canceled += instance.OnSwitchSlot;
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
        }

        private void UnregisterCallbacks(IInventoryActionActions instance)
        {
            @SwitchSlot.started -= instance.OnSwitchSlot;
            @SwitchSlot.performed -= instance.OnSwitchSlot;
            @SwitchSlot.canceled -= instance.OnSwitchSlot;
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
        }

        public void RemoveCallbacks(IInventoryActionActions instance)
        {
            if (m_Wrapper.m_InventoryActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActionActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActionActions @InventoryAction => new InventoryActionActions(this);

    // SpawnAction
    private readonly InputActionMap m_SpawnAction;
    private List<ISpawnActionActions> m_SpawnActionActionsCallbackInterfaces = new List<ISpawnActionActions>();
    private readonly InputAction m_SpawnAction_MovePrefab;
    private readonly InputAction m_SpawnAction_Confirm;
    private readonly InputAction m_SpawnAction_Cancel;
    public struct SpawnActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public SpawnActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePrefab => m_Wrapper.m_SpawnAction_MovePrefab;
        public InputAction @Confirm => m_Wrapper.m_SpawnAction_Confirm;
        public InputAction @Cancel => m_Wrapper.m_SpawnAction_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_SpawnAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnActionActions set) { return set.Get(); }
        public void AddCallbacks(ISpawnActionActions instance)
        {
            if (instance == null || m_Wrapper.m_SpawnActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpawnActionActionsCallbackInterfaces.Add(instance);
            @MovePrefab.started += instance.OnMovePrefab;
            @MovePrefab.performed += instance.OnMovePrefab;
            @MovePrefab.canceled += instance.OnMovePrefab;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ISpawnActionActions instance)
        {
            @MovePrefab.started -= instance.OnMovePrefab;
            @MovePrefab.performed -= instance.OnMovePrefab;
            @MovePrefab.canceled -= instance.OnMovePrefab;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ISpawnActionActions instance)
        {
            if (m_Wrapper.m_SpawnActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpawnActionActions instance)
        {
            foreach (var item in m_Wrapper.m_SpawnActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpawnActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpawnActionActions @SpawnAction => new SpawnActionActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnSwitchSkill(InputAction.CallbackContext context);
        void OnGuard(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnCastSkill(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IInventoryActionActions
    {
        void OnSwitchSlot(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
    public interface ISpawnActionActions
    {
        void OnMovePrefab(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
