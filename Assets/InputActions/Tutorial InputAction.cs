//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/Tutorial InputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TutorialInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TutorialInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tutorial InputAction"",
    ""maps"": [
        {
            ""name"": ""TutorialAction"",
            ""id"": ""0db4afb1-d029-4694-acc1-b1cf7b0b0060"",
            ""actions"": [
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""74cd3e33-006f-43c0-b080-73118f128310"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""8834df26-f300-498f-9a47-6faff861f4c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""958f84f5-4639-47a1-9442-b1c370bfc28a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fea0d838-7ff4-4d54-afcb-df834aa3e7d0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f37f3c86-a805-4acb-b03a-405d14db7b1e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""509e1641-a3e9-401c-8cdb-0e140728e89f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3de9f5c-3c23-4dc5-b04d-0e46c5228b3c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""711c064a-5845-4970-a167-1ba9ae746e74"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TutorialAction
        m_TutorialAction = asset.FindActionMap("TutorialAction", throwIfNotFound: true);
        m_TutorialAction_Swipe = m_TutorialAction.FindAction("Swipe", throwIfNotFound: true);
        m_TutorialAction_Cancel = m_TutorialAction.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TutorialAction
    private readonly InputActionMap m_TutorialAction;
    private List<ITutorialActionActions> m_TutorialActionActionsCallbackInterfaces = new List<ITutorialActionActions>();
    private readonly InputAction m_TutorialAction_Swipe;
    private readonly InputAction m_TutorialAction_Cancel;
    public struct TutorialActionActions
    {
        private @TutorialInputAction m_Wrapper;
        public TutorialActionActions(@TutorialInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swipe => m_Wrapper.m_TutorialAction_Swipe;
        public InputAction @Cancel => m_Wrapper.m_TutorialAction_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_TutorialAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TutorialActionActions set) { return set.Get(); }
        public void AddCallbacks(ITutorialActionActions instance)
        {
            if (instance == null || m_Wrapper.m_TutorialActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TutorialActionActionsCallbackInterfaces.Add(instance);
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ITutorialActionActions instance)
        {
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ITutorialActionActions instance)
        {
            if (m_Wrapper.m_TutorialActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITutorialActionActions instance)
        {
            foreach (var item in m_Wrapper.m_TutorialActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TutorialActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TutorialActionActions @TutorialAction => new TutorialActionActions(this);
    public interface ITutorialActionActions
    {
        void OnSwipe(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
